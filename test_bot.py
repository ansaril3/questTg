import unittest
import json, subprocess
from unittest.mock import MagicMock, patch
from config import TOKEN, CHAPTERS_FILE
from handlers.game_handler import handle_choice, send_chapter
from utils.state_manager import load_state, save_state, state_cache
import telebot

# –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ __pycache__
subprocess.run("find . -name '__pycache__' -exec rm -rf {} +", shell=True)
print("üóëÔ∏è –í—Å–µ –ø–∞–ø–∫–∏ __pycache__ —É–¥–∞–ª–µ–Ω—ã")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—ã
with open(CHAPTERS_FILE, "r", encoding="utf-8") as file:
    chapters = json.load(file)
    print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–ª–∞–≤: {len(chapters)} –∏–∑ {CHAPTERS_FILE}")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ (–æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Telegram API)
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
bot.send_message = MagicMock()
bot.send_photo = MagicMock()
bot.send_document = MagicMock()
bot.send_video = MagicMock()
bot.send_audio = MagicMock()


class TestBotSequential(unittest.TestCase):
    """–¢–µ—Å—Ç Telegram-–±–æ—Ç–∞: –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–ª–∞–≤"""

    def setUp(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞"""
        self.chat_id = 123456789  # –¢–µ—Å—Ç–æ–≤—ã–π ID
        self.errors = []  # –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫

    def send_message_and_check(self, message_text, current_chapter):
        """–ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞"""
        message = type(
            "Message",
            (),
            {"chat": type("Chat", (), {"id": self.chat_id}), "text": message_text},
        )
        try:
            with patch("telebot.TeleBot.send_message", new=MagicMock()), \
                 patch("telebot.TeleBot.send_photo", new=MagicMock()), \
                 patch("telebot.TeleBot.send_document", new=MagicMock()), \
                 patch("telebot.TeleBot.send_video", new=MagicMock()), \
                 patch("telebot.TeleBot.send_audio", new=MagicMock()):
                handle_choice(message)  # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
            return True
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–µ '{current_chapter}' –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '{message_text}': {e}"
            print(error_msg)
            self.errors.append(error_msg)
            return False

    def extract_options_from_chapter(self, chapter_key):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤—ã"""
        chapter = chapters.get(chapter_key.lower(), [])
        options = {}
        for action in chapter:
            action_type = action["type"]
            value = action["value"]
            if action_type in ("btn", "xbtn"):  # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
                options[value["text"]] = value["target"].lower()
        return options

    def test_chapters_sequentially(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç: –ø–æ –ø–æ—Ä—è–¥–∫—É –æ–±—Ö–æ–¥–∏—Ç –≤—Å–µ –≥–ª–∞–≤—ã"""
        all_chapters = list(chapters.keys())
        print(f"üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {len(all_chapters)} –≥–ª–∞–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É...")

        for chapter_key in all_chapters:
            print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—É: {chapter_key}")

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤—ãself.state = {
                
            state = {
                "chapter": chapter_key.lower(),
                "history": [],
                "options": {},
                "inventory": [],
                "gold": 100,
                "end_triggered": False,
                "characteristics": {},
                "saves":[]
            } 
            state_cache[self.chat_id] = state  # –ö–ª–∞–¥–µ–º –≤ –∫—ç—à
            save_state(self.chat_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º

            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤—É
            try:
                with patch("telebot.TeleBot.send_message", new=MagicMock()), \
                     patch("telebot.TeleBot.send_photo", new=MagicMock()), \
                     patch("telebot.TeleBot.send_document", new=MagicMock()), \
                     patch("telebot.TeleBot.send_video", new=MagicMock()), \
                     patch("telebot.TeleBot.send_audio", new=MagicMock()):
                    send_chapter(self.chat_id)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤—ã
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤—ã '{chapter_key}': {e}"
                print(error_msg)
                self.errors.append(error_msg)
                continue  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤–µ

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å
            options = self.extract_options_from_chapter(chapter_key)
            for button_text, target_chapter in options.items():
                print(f"‚û°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏: '{button_text}' (‚Üí {target_chapter})")
                self.send_message_and_check(button_text, chapter_key)

        # ‚úÖ –û—Ç—á–µ—Ç
        print("\nüìä –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        if self.errors:
            print(f"\n‚ùóÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(self.errors)} –æ—à–∏–±–æ–∫:")
            for error in self.errors:
                print(error)
            self.fail(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.errors)} –æ—à–∏–±–æ–∫. –°–º. –≤—ã—à–µ.")
        else:
            print("üéâ –í—Å–µ –≥–ª–∞–≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫!")


if __name__ == "__main__":
    unittest.main()
