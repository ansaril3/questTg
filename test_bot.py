import unittest
import json
from unittest.mock import MagicMock, patch
from config import TOKEN, CHAPTERS_FILE
from handlers.game_handler import handle_choice, send_chapter
from utils.state_manager import load_state, save_state
import telebot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—ã
with open(CHAPTERS_FILE, "r", encoding="utf-8") as file:
    chapters = json.load(file)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ (–æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Telegram API)
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
bot.send_message = MagicMock()
bot.send_photo = MagicMock()
bot.send_document = MagicMock()
bot.send_video = MagicMock()
bot.send_audio = MagicMock()


class TestBot(unittest.TestCase):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞"""

    def setUp(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        self.chat_id = 123456789  # –¢–µ—Å—Ç–æ–≤—ã–π ID (–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –í –¢–ì)
        self.state = load_state(self.chat_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.visited_chapters = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤

    def send_message_and_check(self, message_text):
        """–ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram)"""
        message = type("Message", (), {"chat": type("Chat", (), {"id": self.chat_id}), "text": message_text})
        try:
            with patch("telebot.TeleBot.send_message", new=MagicMock()), \
                 patch("telebot.TeleBot.send_photo", new=MagicMock()):
                handle_choice(message)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ {self.state['chapter']} –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '{message_text}': {e}")
            return False

    def traverse_chapters(self, chapter_key):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≤—Å–µ—Ö –≥–ª–∞–≤"""
        if chapter_key in self.visited_chapters:
            return
        self.visited_chapters.add(chapter_key)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–ª–∞–≤—É
        self.state["chapter"] = chapter_key
        save_state(self.chat_id, self.state)

        # üõ† –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–º–µ–Ω—è–µ–º `send_message()`, `send_photo()`, `send_document()`
        with patch("telebot.TeleBot.send_message", new=MagicMock()), \
             patch("telebot.TeleBot.send_photo", new=MagicMock()), \
             patch("telebot.TeleBot.send_document", new=MagicMock()), \
             patch("telebot.TeleBot.send_video", new=MagicMock()), \
             patch("telebot.TeleBot.send_audio", new=MagicMock()):
            try:
                send_chapter(self.chat_id)  # ‚ö°Ô∏è –í—ã–∑—ã–≤–∞–µ–º `send_chapter()` –ë–ï–ó API Telegram
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_chapter({chapter_key}): {e}")
                return  # –ï—Å–ª–∏ –≥–ª–∞–≤–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –≤—ã—Ö–æ–¥–∏–º

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–Ω–æ–ø–∫–∞–º –≥–ª–∞–≤—ã
        chapter = chapters.get(chapter_key, {})
        if "options" in chapter:
            for button_text, next_chapter in chapter["options"].items():
                if self.send_message_and_check(button_text):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–∞–¥–∞–µ—Ç –ª–∏ –±–æ—Ç
                    self.traverse_chapters(next_chapter)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–¥–µ–º –¥–∞–ª—å—à–µ

    def test_bot(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç: –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –≥–ª–∞–≤–∞–º"""
        self.traverse_chapters(self.state["chapter"])  # ‚ö°Ô∏è –ë–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç `asyncio`


if __name__ == "__main__":
    unittest.main()
