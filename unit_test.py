import unittest
import json
from unittest.mock import MagicMock, patch
from config import bot, TEST_CHAPTERS_FILE
from handlers.game_handler import handle_choice, send_chapter, execute_action
from utils.state_manager import get_state, save_state

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥–ª–∞–≤—ã –∏–∑ JSON
with open(TEST_CHAPTERS_FILE, "r", encoding="utf-8") as file:
    test_chapters = json.load(file)

# –ü–æ–¥–º–µ–Ω—è–µ–º Telegram API
bot.send_message = MagicMock()
bot.send_photo = MagicMock()

class TestBotActions(unittest.TestCase):
    def setUp(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.chat_id = 123456789
        self.state = get_state(self.chat_id)
        self.state["chapter"] = "test_start"
        self.state["history"] = []
        self.state["options"] = {}
        self.state["characteristics"] = {"strength": {"value": 10}, "gold": {"value": 100}}
        save_state(self.chat_id)

    def test_assign(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è assign"""
        action = test_chapters["test_start"][1]  # –ë–µ—Ä—ë–º assign –∏–∑ JSON
        execute_action(self.chat_id, self.state, action)
        self.assertEqual(self.state["characteristics"]["strength"]["value"], 10)

    def test_if_condition_true(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è if –ø—Ä–∏ –∏—Å—Ç–∏–Ω–Ω–æ–º —Å–ª–æ–∂–Ω–æ–º —É—Å–ª–æ–≤–∏–∏ (and)"""
        action = test_chapters["test_start"][2]
        with patch("telebot.TeleBot.send_message") as mock_send:
            execute_action(self.chat_id, self.state, action)
            mock_send.assert_called_with(self.chat_id, "–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    def test_if_condition_false(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è if –ø—Ä–∏ –ª–æ–∂–Ω–æ–º —Å–ª–æ–∂–Ω–æ–º —É—Å–ª–æ–≤–∏–∏ (and)"""
        self.state["characteristics"]["gold"]["value"] = 20
        action = test_chapters["test_start"][2]
        with patch("telebot.TeleBot.send_message") as mock_send:
            execute_action(self.chat_id, self.state, action)
            mock_send.assert_called_with(self.chat_id, "–£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    def test_btn(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è btn"""
        action = test_chapters["test_start"][3]
        execute_action(self.chat_id, self.state, action)
        self.assertEqual(self.state["options"]["‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"], "test_end")

    def test_xbtn(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è xbtn –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        action = test_chapters["test_start"][4]
        execute_action(self.chat_id, self.state, action)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–ø—Ü–∏–∏
        self.assertEqual(self.state["options"]["üî• –¢–∞–π–Ω—ã–π –ø—É—Ç—å"], "test_secret")

        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        message = type(
            "Message", 
            (), 
            {"chat": type("Chat", (), {"id": self.chat_id}), "text": "üî• –¢–∞–π–Ω—ã–π –ø—É—Ç—å"}
        )
        handle_choice(message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.assertEqual(self.state["characteristics"]["secret"]["value"], 1)
        self.assertEqual(self.state["chapter"], "test_secret")

    def test_goto(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è goto"""
        action = test_chapters["test_start"][5]
        execute_action(self.chat_id, self.state, action)
        self.assertEqual(self.state["chapter"], "test_end")

    def test_end(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è end"""
        action = test_chapters["test_end"][1]
        execute_action(self.chat_id, self.state, action)
        self.assertTrue(self.state["end_triggered"])

    def test_image(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è image (—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)"""
        action = {"type": "image", "value": "/Images/1.JPG"}
        with patch("telebot.TeleBot.send_photo") as mock_send:
            execute_action(self.chat_id, self.state, action)
            mock_send.assert_called()

    def test_start_chapter(self):
        """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –≥–ª–∞–≤—ã"""
        with patch("telebot.TeleBot.send_message") as mock_send:
            send_chapter(self.chat_id)
            mock_send.assert_any_call(self.chat_id, "–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã")

    def test_invalid_choice(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        message = type(
            "Message", 
            (), 
            {"chat": type("Chat", (), {"id": self.chat_id}), "text": "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"}
        )
        with patch("telebot.TeleBot.send_message") as mock_send:
            handle_choice(message)
            mock_send.assert_called_with(self.chat_id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    unittest.main()
