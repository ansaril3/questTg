import unittest
import json
from unittest.mock import MagicMock, patch
from config import bot, TEST_CHAPTERS_FILE
from handlers.game_handler import handle_choice, send_chapter, execute_action
from utils.state_manager import get_state, save_state
import subprocess

# –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ __pycache__ —Å –ø–æ–º–æ—â—å—é —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
subprocess.run("find . -name '__pycache__' -exec rm -rf {} +", shell=True)
print("üóëÔ∏è –í—Å–µ –ø–∞–ø–∫–∏ __pycache__ —É–¥–∞–ª–µ–Ω—ã")

# –õ–æ–≥ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ JSON
print(f"üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º JSON: {TEST_CHAPTERS_FILE}")
with open(TEST_CHAPTERS_FILE, "r", encoding="utf-8") as file:
    test_chapters = json.load(file)
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≥–ª–∞–≤—ã –∏–∑ JSON: {list(test_chapters.keys())}")

# –ü–æ–¥–º–µ–Ω—è–µ–º Telegram API
bot.send_message = MagicMock()
bot.send_photo = MagicMock()

class TestBotActions(unittest.TestCase):
    def setUp(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –õ–æ–≥ –≤—ã–∑–æ–≤–∞ —Ç–µ—Å—Ç–∞
        print(f"\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç: {self._testMethodName}")

        self.chat_id = 123456789
        self.state = get_state(self.chat_id)

        if not self.state:
            self.state = {
                "chapter": "test_start",
                "history": [],
                "options": {},
                "inventory": [],
                "gold": 100,   # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
                "end_triggered": False
            }
            save_state(self.chat_id)

    def test_assign(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è assign"""
        print("‚û°Ô∏è –ó–∞–ø—É—Å–∫ test_assign")
        action = test_chapters["test_start"][1]
        execute_action(self.chat_id, self.state, action)
        self.assertEqual(self.state["characteristics"]["strength"]["value"], 10)


    def test_btn(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è btn"""
        print("‚û°Ô∏è –ó–∞–ø—É—Å–∫ test_btn")
        action = test_chapters["test_start"][4]
        execute_action(self.chat_id, self.state, action)
        self.assertEqual(self.state["options"]["‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"], "test_end")

    

if __name__ == "__main__":
    unittest.main()
