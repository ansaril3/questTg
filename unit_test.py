import unittest
import json
from unittest.mock import MagicMock, patch
from config import bot, CHAPTERS_FILE
from handlers.game_handler import handle_choice, send_chapter, execute_action
from utils.state_manager import get_state, save_state
import subprocess

# –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ __pycache__
subprocess.run("find . -name '__pycache__' -exec rm -rf {} +", shell=True)
print("üóëÔ∏è –í—Å–µ –ø–∞–ø–∫–∏ __pycache__ —É–¥–∞–ª–µ–Ω—ã")

# –õ–æ–≥ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ JSON
print(f"üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º JSON: {CHAPTERS_FILE}")
with open(CHAPTERS_FILE, "r", encoding="utf-8") as file:
    test_chapters = json.load(file)
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≥–ª–∞–≤—ã –∏–∑ JSON: {list(test_chapters.keys())}")

# –ü–æ–¥–º–µ–Ω—è–µ–º Telegram API
bot.send_message = MagicMock()
bot.send_photo = MagicMock()

class TestBotActions(unittest.TestCase):
    def setUp(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –õ–æ–≥ –≤—ã–∑–æ–≤–∞ —Ç–µ—Å—Ç–∞
        print(f"\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç: {self._testMethodName}")

        self.chat_id = 123456789
        self.state = get_state(self.chat_id)

        if not self.state:
            self.state = {
                "chapter": "test_start",
                "history": [],
                "options": {},
                "inventory": [],
                "gold": 100,
                "end_triggered": False,
                "characteristics": {}
            }
            save_state(self.chat_id)

    def test_assign(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è assign"""
        print("‚û°Ô∏è –ó–∞–ø—É—Å–∫ test_assign")

        # ‚úÖ –ü–∞—Ç—á–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é chapters –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        with patch("handlers.game_handler.chapters", test_chapters):
            action = test_chapters["test_start"][1]
            execute_action(self.chat_id, self.state, action)

        self.assertEqual(self.state["characteristics"]["strength"]["value"], 10)

    def test_gold(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è gold"""
        print("‚û°Ô∏è –ó–∞–ø—É—Å–∫ test_gold")

        # ‚úÖ –ü–∞—Ç—á–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é chapters –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        with patch("handlers.game_handler.chapters", test_chapters):
            action = test_chapters["test_start"][2]
            execute_action(self.chat_id, self.state, action)
            self.assertEqual(self.state["gold"], 100)

            action = test_chapters["test_secret"][1]
            execute_action(self.chat_id, self.state, action)
            self.assertEqual(self.state["gold"], 120)  # +20 –∏–∑ test_secret

            action = {"type": "gold", "value": "-10"}
            execute_action(self.chat_id, self.state, action)
            self.assertEqual(self.state["gold"], 110)  # 120 - 10

    def test_if_condition_true(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è if –ø—Ä–∏ –∏—Å—Ç–∏–Ω–Ω–æ–º —É—Å–ª–æ–≤–∏–∏"""
        print("‚û°Ô∏è –ó–∞–ø—É—Å–∫ test_if_condition_true")

        self.state["characteristics"]["strength"] = {"value": 10}

        # ‚úÖ –ü–∞—Ç—á–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é chapters –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        with patch("handlers.game_handler.chapters", test_chapters):
            action = test_chapters["test_start"][3]
            with patch("handlers.game_handler.bot.send_message") as mock_send:
                execute_action(self.chat_id, self.state, action)
                mock_send.assert_called_with(self.chat_id, "–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    def test_if_condition_false(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è if –ø—Ä–∏ –ª–æ–∂–Ω–æ–º —É—Å–ª–æ–≤–∏–∏"""
        print("‚û°Ô∏è –ó–∞–ø—É—Å–∫ test_if_condition_false")

        self.state["characteristics"]["strength"] = {"value": 55}

        # ‚úÖ –ü–∞—Ç—á–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é chapters –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        with patch("handlers.game_handler.chapters", test_chapters):
            action = test_chapters["test_start"][3]
            # ‚úÖ –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ send_message –∏–∑ handlers.game_handler
            with patch("handlers.game_handler.bot.send_message") as mock_send:
                execute_action(self.chat_id, self.state, action)
                mock_send.assert_called_with(self.chat_id, "–£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")


    def test_xbtn(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è xbtn –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        print("‚û°Ô∏è –ó–∞–ø—É—Å–∫ test_xbtn")

        with patch("handlers.game_handler.chapters", test_chapters):
            action = test_chapters["test_start"][5]
            execute_action(self.chat_id, self.state, action)

            self.assertEqual(self.state["options"]["üî• –¢–∞–π–Ω—ã–π –ø—É—Ç—å"], "test_secret")

            message = type(
                "Message", 
                (), 
                {"chat": type("Chat", (), {"id": self.chat_id}), "text": "üî• –¢–∞–π–Ω—ã–π –ø—É—Ç—å"}
            )
            handle_choice(message)

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (assign)
            self.assertEqual(self.state["characteristics"]["secret"]["value"], 1)

    def test_goto(self):
        """–¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è goto"""
        print("‚û°Ô∏è –ó–∞–ø—É—Å–∫ test_goto")

        with patch("handlers.game_handler.chapters", test_chapters):
            action = test_chapters["test_start"][6]
            execute_action(self.chat_id, self.state, action)
            self.assertEqual(self.state["chapter"], "test_secret")

    def test_end(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è end"""
        print("‚û°Ô∏è –ó–∞–ø—É—Å–∫ test_end")

        # ‚úÖ –ü–∞—Ç—á–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é chapters –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        with patch("handlers.game_handler.chapters", test_chapters):
            with patch("handlers.game_handler.bot.send_message") as mock_send:
                with patch("handlers.game_handler.bot.send_photo") as mock_send_photo:
                    # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤—É –∏ –≤—ã–∑—ã–≤–∞–µ–º send_chapter()
                    self.state["chapter"] = "test_end"
                    send_chapter(self.chat_id)  

                    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (assign) —Å—Ä–∞–±–æ—Ç–∞–ª–æ
                    self.assertEqual(self.state["characteristics"]["speed"]["value"], 10)

                    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ speed (–Ω–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
                    self.assertEqual(self.state["characteristics"]["speed"]["value"], 10)

        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!")


if __name__ == "__main__":
    unittest.main()
