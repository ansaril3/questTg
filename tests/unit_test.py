import unittest
import json
from unittest.mock import MagicMock, patch
from config import bot, config
from handlers.game_handler import handle_inline_choice, enter_instruction, handle_back, send_chapter, execute_action, save_game, load_game, handle_load_choice
from handlers.inventory_handler import show_inventory, handle_use_item
from utils.state_manager import get_state, save_state, load_specific_state, state_cache
import subprocess
from handlers.stats_handler import show_characteristics
from handlers.instruction_handler import send_instruction, handle_instruction_action

# Remove __pycache__
subprocess.run("find . -name '__pycache__' -exec rm -rf {} +", shell=True)
print("üóëÔ∏è All __pycache__ folders have been deleted")

# Load test chapters
TEST_CHAPTERS_FILE = "tests/test_chapters.json"
print(f"üìÇ Opening JSON: {TEST_CHAPTERS_FILE}")
with open(TEST_CHAPTERS_FILE, "r", encoding="utf-8") as file:
    test_chapters = json.load(file)
print(f"‚úÖ Chapters loaded: {list(test_chapters.keys())}")

# Mock Telegram API
bot.send_message = MagicMock()
bot.send_photo = MagicMock()


class TestBotActions(unittest.TestCase):
    def setUp(self):
        print(f"\nüöÄüöÄüöÄüöÄüöÄüöÄüöÄ --------------------------Running test: {self._testMethodName}")
        self.chat_id = 123456789
        self.state = get_state(self.chat_id) or {
            "chapter": "test_start",
            "history": [],
            "options": {},
            "inventory": [],
            "gold": 100,
            "end_triggered": False,
            "characteristics": {}
        }
        save_state(self.chat_id)

    def simulate_inline(self, data):
        """Simulate pressing inline button (callback_query)"""
        return type("CallbackQuery", (), {
            "message": type("Message", (), {"chat": type("Chat", (), {"id": self.chat_id})}),
            "data": data
        })

    def test_xbtn(self):
        print("‚û°Ô∏è Running test_xbtn")
        with patch("handlers.game_handler.config.chapters", test_chapters):
            action = {
                "type": "xbtn",
                "value": {
                    "text": "üî• Secret Path",
                    "target": "test_secret",
                    "actions": [
                        {
                            "type": "assign",
                            "value": {
                                "key": "secret",
                                "value": "1",
                                "name": "–°–µ–∫—Ä–µ—Ç"
                            }
                        }
                    ]
                }
            }
            execute_action(self.chat_id, self.state, action)
            self.assertEqual(self.state["options"]["üî• Secret Path"], "test_secret")
            self.assertNotIn("secret", self.state["characteristics"])

            # ‚úÖ Simulate inline button click
            query = self.simulate_inline("üî• Secret Path")
            handle_inline_choice(query)

            # ‚úÖ Check updates
            self.assertEqual(self.state["characteristics"]["secret"]["value"], 1)
            self.assertEqual(self.state["chapter"], "test_secret")

        print("‚úÖ Test passed!")

    def test_end(self):
        print("‚û°Ô∏è Running test_end")
        with patch("handlers.game_handler.config.chapters", test_chapters):
            # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤—É "test_end"
            self.state["chapter"] = "test_end"
            self.state["characteristics"] = {}

            # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º send_chapter
            send_chapter(self.chat_id)

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–æ—Ä–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –≤ 10 –∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ 20
            self.assertEqual(self.state["characteristics"]["speed"]["value"], 10, "–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 10!")

        print("‚úÖ Test passed!")


    def test_btn(self):
        print("‚û°Ô∏è Running test_btn")
        with patch("handlers.game_handler.config.chapters", test_chapters):
            with patch("handlers.game_handler.bot.send_message") as mock_send:
                action = {
                    "type": "btn",
                    "value": {
                        "text": "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                        "target": "test_end"
                    }
                }

                # ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º action
                execute_action(self.chat_id, self.state, action)

                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ inline-–∫–Ω–æ–ø–∫–∞ "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –ø–æ—è–≤–∏–ª–∞—Å—å
                self.assertIn("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", self.state["options"])
                self.assertEqual(self.state["options"]["‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"], "test_end")

                # ‚úÖ –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
                query = self.simulate_inline("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                handle_inline_choice(query)

                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–∞–≤–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ test_end
                self.assertEqual(self.state["chapter"], "test_end")

        print("‚úÖ Test passed!")

    def test_image(self):
        print("‚û°Ô∏è Running test_image")
        with patch("handlers.game_handler.config.chapters", test_chapters):
            with patch("handlers.game_handler.bot.send_photo") as mock_send_photo:
                # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤—É "test_image"
                self.state["chapter"] = "test_image"

                # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º send_chapter
                send_chapter(self.chat_id)

                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bot.send_photo –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                mock_send_photo.assert_called_once()
                actual_path = mock_send_photo.call_args[0][1]  # –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç (–ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é)
                expected_path = 'data/Images/3.JPG'
                self.assertTrue(actual_path.name.endswith(expected_path), 
                            f"Expected path to end with '{expected_path}', but got '{actual_path}'")

        print("‚úÖ Test passed!")

    def test_return_goto(self):
        print("‚û°Ô∏è Running test_return")
        test_chapters = {
            "test_start": [
                {
                    "type": "text",
                    "value": "–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"
                },
                {
                    "type": "gold",
                    "value": "20"
                }
            ],
            "test_return": [
                {
                    "type": "goto",
                    "value": "return"
                },
                {
                    "type": "gold",
                    "value": "40"
                }
            ]
        }
        with patch("handlers.game_handler.config.chapters", test_chapters):
            # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.state["chapter"] = "test_start"
            self.state["history"].append("test_start")
            self.assertEqual(self.state["chapter"], "test_start")
            
            self.state["chapter"] = "test_return"
            self.assertEqual(self.state["chapter"], "test_return")

            # ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º action –≥–ª–∞–≤—ã test_return
            action = test_chapters["test_return"][0]  # {'type': 'goto', 'value': 'return'}
            execute_action(self.chat_id, self.state, action)
            
            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ test_start
            self.assertEqual(self.state["gold"], 20)
            self.assertEqual(self.state["chapter"], "test_start", "–ì–ª–∞–≤–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ test_start!")
        
        print("‚úÖ Test passed!")

    def test_gold(self):
        print("‚û°Ô∏è Running test_gold")
        with patch("handlers.game_handler.config.chapters", test_chapters):
            self.state["gold"] = 0
            
            actions = test_chapters["test_secret"]
            for action in actions:
                execute_action(self.chat_id, self.state, action)
            
            self.assertEqual(self.state["gold"], 20)
        print("‚úÖ Test passed!")

    def test_condition(self):
        print("‚û°Ô∏è Running test_condition")
        with patch("handlers.game_handler.config.chapters", test_chapters):
            with patch("handlers.game_handler.bot.send_message") as mock_send:
                self.state["chapter"] = "test_start"
                send_chapter(self.chat_id)
                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —É—Å–ª–æ–≤–∏—è
                found = any(
                    "Condition met" in call.args[1] for call in mock_send.call_args_list
                )
                self.assertTrue(found, "Success")
            
        print("‚úÖ Test passed!")

    def test_assign_characteristics(self):
        print("‚û°Ô∏è Running test_characteristics")
        with patch("handlers.game_handler.config.chapters", test_chapters):
            with patch("handlers.game_handler.bot.send_message") as mock_send:
                action = test_chapters["test_end"][0]
                execute_action(self.chat_id, self.state, action)
            
                # ‚úÖ Simulate Characteristics inline button
                query = self.simulate_inline("üìä Characteristics")
                show_characteristics(query)

                # ‚úÖ Check message content
                expected_message = "üìä Your characteristics:\nüîπ Speed: 10\n"
                last_call = mock_send.call_args_list[-1]
                actual_args, actual_kwargs = last_call
                self.assertEqual(actual_args[0], self.chat_id)
                self.assertEqual(actual_args[1], expected_message)

        print("‚úÖ Test passed!")


    def test_inventory(self):
        print("‚û°Ô∏è Running test_inventory")
        with patch("handlers.game_handler.config.chapters", test_chapters):
            with patch("handlers.game_handler.bot.send_message") as mock_send:
                self.state["inventory"] = ["vial of magic potion[usable]"]
                self.state["options"]["üéí Inventory"] = "üéí Inventory"
                self.state["gold"] = 130

                # ‚úÖ Simulate Inventory inline button
                query = self.simulate_inline("üéí Inventory")
                show_inventory(query)

                # ‚úÖ Check inventory message
                expected_message = (
                    "üéí *Your inventory:*\n"
                    "üí∞ Gold: 130\n"
                    "üîπ vial of magic potion (‚ú® usable)\n"
                )
                last_call = mock_send.call_args_list[-1]
                actual_args, actual_kwargs = last_call
                self.assertEqual(actual_args[0], self.chat_id)
                self.assertEqual(actual_args[1].strip(), expected_message.strip())
                self.assertEqual(actual_kwargs.get("parse_mode"), "Markdown")

                # ‚úÖ Check use item button
                self.assertIn("Use vial of magic potion", self.state["options"])

                # ‚úÖ Simulate using item
                query_use = self.simulate_inline("Use vial of magic potion")
                handle_use_item(query_use)

                # ‚úÖ Check characteristic updated
                self.assertEqual(self.state["characteristics"]["speed"]["value"], 10)

        print("‚úÖ Test passed!")

    def test_save_and_load(self):
        """‚úÖ Test saving and loading game"""
        print("‚û°Ô∏è Running test_save_and_load")

        with patch("handlers.game_handler.config.chapters", test_chapters):
            with patch("handlers.game_handler.bot.send_message") as mock_send:

                # ‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
                self.state["chapter"] = "inv_check"
                self.state["inventory"] = []
                self.state["gold"] = 100
                self.state["history"] = []
                self.state["options"] = {}

                # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
                query = self.simulate_inline("üì• Save game")
                save_game(query)

                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                last_call = mock_send.call_args_list[-1]
                actual_args, actual_kwargs = last_call
                self.assertEqual(actual_args[0], self.chat_id)
                self.assertIn("‚úÖ Game saved:", actual_args[1])
                print(f"Game saved: {actual_args[1]}")
                print(f"Chapter : {self.state["chapter"]}")
                # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                save_file = f"{config.SAVES_DIR}/{self.chat_id}.json"
                with open(save_file, "r", encoding="utf-8") as file:
                    existing_data = json.load(file)
                    last_save_name = sorted(existing_data.keys(), reverse=True)[0]
                print(f"last_save_name={last_save_name}")

                # ‚úÖ –ú–µ–Ω—è–µ–º –≥–ª–∞–≤—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                self.state["chapter"] = "test_end"
                self.assertEqual(self.state["chapter"], "test_end")

                # ‚úÖ –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏
                query = self.simulate_inline("üì§ Load game")
                load_game(query)

                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ 
                last_call = mock_send.call_args_list[-1]
                actual_args, actual_kwargs = last_call
                self.assertEqual(actual_args[0], self.chat_id)
                self.assertIn("üîÑ *Select a save:*", actual_args[1])

                # ‚úÖ –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                load_specific_state(self.chat_id, last_save_name)
                self.state = state_cache[self.chat_id]
                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–∞–≤–∞ —Å–º–µ–Ω–∏–ª–∞—Å—å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ `inv_check`
                self.assertEqual(self.state["chapter"], "inv_check", "–ì–ª–∞–≤–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'inv_check'!")

        print("‚úÖ Test successfully passed!")

    def test_instruction_navigation(self):
        print("‚û°Ô∏è Running test_instruction_navigation")
        with patch("handlers.game_handler.config.chapters", test_chapters):
            with patch("handlers.game_handler.bot.send_message") as mock_send:
                # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤—É "test_game_ch"
                self.state["chapter"] = "test_game_ch"
                # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º send_chapter
                send_chapter(self.chat_id)
                
                # ‚úÖ –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
                query = self.simulate_inline("üìñ Instructions")
                enter_instruction(query)

                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ state["mode"] == "instruction"
                self.assertEqual(self.state["mode"], "instruction", "Mode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'instruction'!")

                # ‚úÖ –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "‚¨ÖÔ∏è Go back"
                query = self.simulate_inline("‚¨ÖÔ∏è Go back")
                handle_back(query)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–µ "test_game_ch"

                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç "this is game"
                # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ state["mode"] == "instruction"
                self.assertEqual(self.state["mode"], "game", "Mode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'instruction'!")
        print("‚úÖ Test passed!")

    

if __name__ == "__main__":
    unittest.main()
