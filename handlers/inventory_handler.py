from config import bot, config
from utils.state_manager import get_state, state_cache
from handlers.game_handler import send_buttons, send_chapter
import telebot.types as types


# ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏
@bot.callback_query_handler(func=lambda call: call.data == "üéí Inventory")
def show_inventory(call):
    chat_id = call.message.chat.id
    state = get_state(chat_id)

    inventory_list = state.get("inventory", [])
    gold = state.get("gold", 0)

    if not inventory_list and gold == 0:
        bot.send_message(chat_id, "üéí Your inventory is empty.")
        send_buttons(chat_id)
        return
    
    message_text = "üéí *Your inventory:*\n"

    if gold > 0:
        message_text += f"üí∞ Gold: {gold}\n"

    # ‚úÖ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ use_ –∫–Ω–æ–ø–∫–∏
    state["options"] = {k: v for k, v in state["options"].items() if not k.startswith("Use ")}

    # ‚úÖ –°–æ–∑–¥–∞–µ–º Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    markup = types.InlineKeyboardMarkup(row_width=2)

    for item in inventory_list:
        print(f"Inventory item: {item}")
        if "[usable]" in item:
            item_name = item.replace("[usable]", "").strip()
            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"
            state["options"][f"Use {item_name}"] = f"use_{item_name}"
            message_text += f"üîπ {item_name} ‚ú®\n"
            markup.add(types.InlineKeyboardButton(f"Use {item_name}", callback_data=f"use_{item_name}"))
        else:
            message_text += f"üîπ {item}\n"

    # ‚úÖ –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏–≥—Ä—É
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="back_to_game"))

    # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(chat_id, f"\n{message_text}", parse_mode="Markdown", reply_markup=markup)


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "Use ..." –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("use_"))
def handle_use_item(call):
    chat_id = call.message.chat.id
    state = state_cache[chat_id]

    item_name = call.data.replace("use_", "").strip()

    if call.data in config.chapters:
        if state["history"] and state["history"][-1] != state["chapter"]:
            state["history"].append(state["chapter"])

        state["chapter"] = call.data
        send_chapter(chat_id)
    else:
        bot.send_message(chat_id, f"‚ö†Ô∏è Chapter '{call.data}' not found.")


# ‚úÖ –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏–≥—Ä—É
@bot.callback_query_handler(func=lambda call: call.data == "back_to_game")
def back_to_game(call):
    chat_id = call.message.chat.id
    send_buttons(chat_id)
