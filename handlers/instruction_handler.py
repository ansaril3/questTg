# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π

from config import bot, instructions, first_instruction, chapters
from utils.state_manager import load_state, save_state
from handlers.game_handler import send_chapter
import telebot.types as types

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
def send_instruction(chat_id):
    state = load_state(chat_id)
    instruction_key = state["instruction"]
    instruction = instructions.get(instruction_key)

    if not instruction:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ä–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot.send_message(chat_id, instruction["text"])
    send_instruction_keyboard(chat_id, instruction)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
def send_instruction_keyboard(chat_id, instruction):
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    buttons = [types.KeyboardButton(option) for option in instruction["options"].keys()]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", reply_markup=markup)

# –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@bot.message_handler(func=lambda message: message.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
def enter_instruction(message):
    chat_id = message.chat.id
    state = load_state(chat_id)
    state["instruction"] = first_instruction  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    save_state(chat_id, state)
    send_instruction(chat_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@bot.message_handler(func=lambda message: message.text in get_instruction_options())
def handle_instruction_choice(message):
    chat_id = message.chat.id
    state = load_state(chat_id)
    instruction_key = state["instruction"]
    instruction = instructions.get(instruction_key)

    if message.text in instruction["options"]:
        state["instruction"] = instruction["options"][message.text]
        save_state(chat_id, state)
        send_instruction(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
def get_instruction_options():
    return {option for instruction in instructions.values() for option in instruction["options"].keys()}

# –í—ã—Ö–æ–¥ –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –∏–≥—Ä—É
@bot.message_handler(func=lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É")
def exit_instruction(message):
    chat_id = message.chat.id
    state = load_state(chat_id)
    state["instruction"] = None  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    save_state(chat_id, state)
    send_chapter(chat_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–≤–µ—Å—Ç