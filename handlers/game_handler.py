from config import bot, chapters  
from utils.state_manager import load_specific_state, save_state, get_state, state_cache, SAVES_LIMIT, SAVES_DIR
from utils.helpers import check_conditions, calculate_characteristic, process_inventory_action, replace_variables_in_text, evaluate_condition
import telebot.types as types
from collections import deque
from datetime import datetime
import os
import random
import re
import json

DATA_DIR = "data"
HISTORY_LIMIT = 10
COMMON_BUTTONS = [
    "üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É",
    "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É",
    "üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
    "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
    "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
]

# ‚úÖ –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
@bot.message_handler(commands=['start'])
def start_game(message):
    user_id = message.chat.id
    state = get_state(user_id)
    send_chapter(user_id)


# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤—ã –∏–≥—Ä–æ–∫—É
def send_chapter(chat_id):
    state = state_cache[chat_id]

    if state.get("end_triggered"):
        state["end_triggered"] = False
        return
    
    chapter_key = state["chapter"]
    chapter = chapters.get(chapter_key)
    print(f"------------------------CHAPTER: {chapter_key}")

    if not chapter:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –≥–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    state["options"] = {}
    buttons = []

    for action in chapter:
        print(f"------ACTION: {str(action)[:60]}{'...' if len(str(action)) > 60 else ''}")
        
        execute_action(chat_id, state, action)

        # ‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª end
        if state.get("end_triggered"):
            state["end_triggered"] = False
            break

    send_buttons(chat_id)
         

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
def handle_text(chat_id, value):
    state = state_cache[chat_id]
    new_value = replace_variables_in_text(state, value)
    bot.send_message(chat_id, new_value)

def handle_btn(state, value, buttons):
    buttons.append(types.KeyboardButton(value["text"]))
    state["options"][value["text"]] = value["target"]

def handle_xbtn(chat_id, state, value, buttons):
    buttons.append(types.KeyboardButton(value["text"]))
    state["options"][value["text"]] = value["target"]

    if "actions" in value:
        state["options"][f"{value['text']}_actions"] = value["actions"]

def handle_inventory(state, value):
    process_inventory_action(state, value)

def handle_gold(state, value):
    try:
        if value.startswith("+"):
            state["gold"] += int(value[1:])
        elif value.startswith("-"):
            state["gold"] -= int(value[1:])
        else:
            state["gold"] = int(value)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–æ–ª–æ—Ç–∞: {e}")

def handle_assign(state, value):
    key = value["key"].lower()
    new_value = value["value"]
    name = value.get("name", key)

    new_value = re.sub(r'rnd(\d+)', lambda m: str(random.randint(1, int(m.group(1)))), new_value)

    local_vars = {k: v["value"] for k, v in state["characteristics"].items()}
    try:
        new_value = int(new_value) if new_value.isdigit() else eval(new_value, {}, local_vars)
    except Exception as e:
        new_value = state["characteristics"].get(key, {"value": 0})["value"]

    state["characteristics"][key] = {"name": name, "value": new_value}

def handle_goto(chat_id, state, value):
    if value == "return":
        if state["history"]:
            state["chapter"] = state["history"].pop()
            send_chapter(chat_id)
        return
    
    if value in chapters:
        state["history"].append(state["chapter"])
        state["chapter"] = value
        send_chapter(chat_id)

def handle_image(chat_id, value):
    image_path = DATA_DIR + value.replace("\\", "/")
    if os.path.exists(image_path):
        with open(image_path, "rb") as photo:
            bot.send_photo(chat_id, photo)
    else:
        bot.send_message(chat_id, f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {value}")

def handle_if(chat_id, state, value, buttons):
    condition = value["condition"]
    actions = value["actions"]
    else_actions = value.get("else_actions", [])

    if evaluate_condition(state, condition):
        print(f"‚úÖ –£—Å–ª–æ–≤–∏–µ –ò–°–¢–ò–ù–ù–û: {condition}")
        for sub_action in actions:
            execute_action(chat_id, state, sub_action, buttons)
    else:
        print(f"‚ùå –£—Å–ª–æ–≤–∏–µ –õ–û–ñ–ù–û: {condition}")
        for sub_action in else_actions:
            execute_action(chat_id, state, sub_action, buttons)

@bot.message_handler(func=lambda message: message.text in get_all_options(message.chat.id))
def handle_choice(message):
    chat_id = message.chat.id
    state = get_state(chat_id)

    print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {message.text}")

    target = state["options"].get(message.text)
    actions = state["options"].get(f"{message.text}_actions")

    if actions:
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω—è—é –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è {message.text}: {actions}")
        for sub_action in actions:
            execute_action(chat_id, state, sub_action)

    if target == "return":
        if state["history"]:
            state["chapter"] = state["history"].pop()
            send_chapter(chat_id)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–ª–∞–≤—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
        return

    if target in chapters:
        state["history"].append(state["chapter"])
        state["chapter"] = target
        send_chapter(chat_id)
        return

    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤ handle_choice
@bot.message_handler(func=lambda message: True)
def log_buttons(message):
    chat_id = message.chat.id
    state = get_state(chat_id)
    buttons = list(state.get("options", {}).keys())
    print(f"‚úÖ –¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {buttons}")


# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
@bot.message_handler(func=lambda message: message.text == "üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É")
def save_game(message):
    chat_id = message.chat.id
    state = get_state(chat_id)

    save_state(chat_id)
    last_save = state["saves"][-1]["name"]
    bot.send_message(chat_id, f"‚úÖ *–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:* `{last_save}`", parse_mode="Markdown")

    buttons = [types.KeyboardButton(text) for text in state.get("options", {}).keys()]
    send_buttons(chat_id, buttons)

@bot.message_handler(func=lambda message: message.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É")
def load_game(message):
    chat_id = message.chat.id

    save_file = f"{SAVES_DIR}/{chat_id}.json"
    if not os.path.exists(save_file):
        bot.send_message(chat_id, "‚ö†Ô∏è *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π!*", parse_mode="Markdown")
        return
    
    with open(save_file, "r", encoding="utf-8") as file:
        existing_data = json.load(file)

    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    for i, save_name in enumerate(sorted(existing_data.keys(), reverse=True)):
        markup.add(types.KeyboardButton(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å {i + 1} ({save_name})"))

    bot.send_message(chat_id, "üîÑ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:*", reply_markup=markup, parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text.startswith("–ó–∞–≥—Ä—É–∑–∏—Ç—å "))
def handle_load_choice(message):
    chat_id = message.chat.id

    try:
        save_index = int(message.text.split()[1]) - 1

        save_file = f"{SAVES_DIR}/{chat_id}.json"
        with open(save_file, "r", encoding="utf-8") as file:
            existing_data = json.load(file)

            save_names = sorted(existing_data.keys(), reverse=True)
            selected_save = save_names[save_index]

            # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ state_manager
            load_specific_state(chat_id, selected_save)

            bot.send_message(chat_id, f"‚úÖ *–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:* `{selected_save}`", parse_mode="Markdown")
            send_chapter(chat_id)

    except (ValueError, IndexError) as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.*", parse_mode="Markdown")

# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ options
def send_buttons(chat_id):
    state = state_cache.get(chat_id)
    if not state:
        return
    
    options = state.get("options", {})
    if not options:
        return

    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    
    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä–∞–º–∏
    buttons = [types.KeyboardButton(text) for text in options.keys()]
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.add(buttons[i], buttons[i + 1])
        else:
            markup.add(buttons[i])

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä–∞–º–∏
    common_buttons = [types.KeyboardButton(text) for text in COMMON_BUTTONS]
    for i in range(0, len(common_buttons), 2):
        if i + 1 < len(common_buttons):
            markup.add(common_buttons[i], common_buttons[i + 1])
        else:
            markup.add(common_buttons[i])

    print(f"üìå –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏: {list(options.keys()) + COMMON_BUTTONS}")
    bot.send_message(chat_id, ".", reply_markup=markup)


# ‚úÖ –£–ø—Ä–æ—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–µ–π—Å—Ç–≤–∏–π
def execute_action(chat_id, state, action):
    action_type = action["type"]
    value = action["value"]

    if action_type == "text":
        handle_text(chat_id, value)
    elif action_type == "btn" or action_type == "xbtn":
        state["options"][value["text"]] = value["target"]
        if "actions" in value:
            state["options"][f"{value['text']}_actions"] = value["actions"]
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {value['text']} -> {value['target']}")
    elif action_type == "inventory":
        handle_inventory(state, value)
    elif action_type == "gold":
        handle_gold(state, value)
    elif action_type == "assign":
        handle_assign(state, value)
    elif action_type == "goto":
        handle_goto(chat_id, state, value)
    elif action_type == "image":
        handle_image(chat_id, value)
    elif action_type == "if":
        handle_if(chat_id, state, value, [])
    elif action_type == "end":
        state["end_triggered"] = True

# ‚úÖ –£–ø—Ä–æ—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
def get_all_options(chat_id):
    state = state_cache.get(chat_id)
    if not state:
        return set()

    options = set(state.get("options", {}).keys())

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –æ–±—â–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    options.update(COMMON_BUTTONS)

    return options

