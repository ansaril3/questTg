# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã

from config import bot, chapters, first_chapter  
from utils.state_manager import load_state, save_state, SAVES_LIMIT
from utils.helpers import check_conditions, calculate_characteristic, process_inventory_action, replace_variables_in_text
import telebot.types as types
from collections import deque
from datetime import datetime
import os

DATA_DIR = "data"  # üìÇ –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
# –ö–æ–º–∞–Ω–¥–∞ /start (–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã)
@bot.message_handler(commands=['start'])
def start_game(message):
    user_id = message.chat.id
    state = {
        "chapter": first_chapter,
        "instruction": None,
        "inventory": [],
        "gold": 0,
        "characteristics": {},
        "saves": deque([], maxlen=SAVES_LIMIT)
    }
    save_state(user_id, state)
    send_chapter(user_id)
    
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
def update_characteristics(state, chapter):
    if "characteristics" in chapter:
        for key, char_data in chapter["characteristics"].items():
            new_value = calculate_characteristic(char_data["value"], state)
            state["characteristics"][key] = {
                "name": char_data.get("name", key),
                "value": new_value,
            }
            print(f"handler | update_characteristics | {key}: {new_value}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤—ã –∏–≥—Ä–æ–∫—É
def send_chapter(chat_id):
    state = load_state(chat_id)
    chapter_key = state["chapter"]
    chapter = chapters.get(chapter_key)

    print(f"handler | ----------------------------- chapter: {chapter_key}")
    if not chapter:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –≥–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    update_characteristics(state, chapter)

    if "add_items" in chapter:
        for item in chapter["add_items"]:
            if item not in state["inventory"]:
                state["inventory"].append(item)
                print(f"handler | add item: {item}")
    
    if "remove_items" in chapter:
        for item in chapter["remove_items"]:
            if item in state["inventory"]:
                state["inventory"].remove(item)
                print(f"handler | remove item: {item}")

    if "add_gold" in chapter:
        state["gold"] += chapter["add_gold"]
        print(f"handler | add gold: {chapter['add_gold']}")
    
    if "remove_gold" in chapter:
        state["gold"] -= chapter["remove_gold"]
        print(f"handler | remove gold: {chapter['remove_gold']}")  

    state["chapter"] = chapter_key
    save_state(chat_id, state)

    chapter_text = replace_variables_in_text(chapter["text"], state)
    if chapter_text == "": 
        chapter_text = '.'
    bot.send_message(chat_id, chapter_text)
    # üì∑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if "image" in chapter:
        image_path = DATA_DIR + chapter["image"].replace("\\", "/")
        if os.path.exists(image_path):
            with open(image_path, "rb") as photo:
                bot.send_photo(chat_id, photo)
        else:
            bot.send_message(chat_id, f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {chapter['image']}")

    send_options_keyboard(chat_id, chapter)

def send_options_keyboard(chat_id, chapter):
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    state = load_state(chat_id)

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ options
    buttons = [types.KeyboardButton(option) for option in chapter["options"].keys()]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º xbtn –≤ –∫–æ—Ä–Ω–µ –≥–ª–∞–≤—ã
    if "xbtn" in chapter:
        xbtn = chapter["xbtn"]
        buttons.append(types.KeyboardButton(xbtn["text"]))
        chapter["options"][xbtn["text"]] = {  
            "target": xbtn["target"],  
            "actions": xbtn["actions"]  
        }  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º actions

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∏–∑ "conditions"
    condition_buttons = []
    if "conditions" in chapter:
        condition_buttons, condition_actions = check_conditions(state, chapter["conditions"])

        print(f"handler | condition_buttons: {condition_buttons}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —É—Å–ª–æ–≤–∏–π
        for btn in condition_buttons:
            buttons.append(types.KeyboardButton(btn["text"]))
            chapter["options"][btn["text"]] = {  
                "target": btn["target"],  
                "actions": btn["actions"]  
            }  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–æ—Ö—Ä–∞–Ω—è–µ–º actions

        print(f"handler | condition_actions: {condition_actions}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —É—Å–ª–æ–≤–∏–π
        for action in condition_actions:
            print(f"handler | action: {action}")
            if action["type"] == "goto":
                state["chapter"] = action["target"]
                save_state(chat_id, state)
                send_chapter(chat_id)
                return  

            elif action["type"] == "pln":
                if isinstance(action["text"], str):  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    processed_text = replace_variables_in_text(action["text"], state)
                    if processed_text == "": 
                        processed_text = '.'
                    bot.send_message(chat_id, processed_text)
                else:
                    print(f"–û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {type(action['text'])}")

            elif action["type"] == "assign":
                key, value = action["key"], action["value"]
                current_value = state["characteristics"].get(key, {"value": 0})["value"]
                local_vars = {k: v["value"] for k, v in state["characteristics"].items()}
                try:
                    new_value = int(value) if value.isdigit() else eval(value, {}, local_vars)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ assign: {e}")
                    new_value = current_value  

                state["characteristics"][key] = {
                    "name": state["characteristics"].get(key, {"name": key})["name"],
                    "value": new_value,
                }

    save_state(chat_id, state)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    markup.add(*buttons)
    markup.add(
        types.KeyboardButton("üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É"),
        types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É"),
        types.KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        types.KeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
        types.KeyboardButton("üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"),
    )
    bot.send_message(chat_id, ".", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ (–≥–ª–∞–≤—ã)
@bot.message_handler(func=lambda message: message.text in get_all_options())
def handle_choice(message):
    chat_id = message.chat.id
    state = load_state(chat_id)
    chapter_key = state["chapter"]
    chapter = chapters.get(chapter_key)

    if message.text in chapter["options"]:
        option_data = chapter["options"][message.text]

        # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å actions –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
        if isinstance(option_data, dict) and "actions" in option_data:
            for action in option_data["actions"]:
                print(f"handler | executing action: {action}")

                if action["type"] == "inv+":
                    process_inventory_action(state, f"Inv+ {action['item']}")
                elif action["type"] == "inv-":
                    process_inventory_action(state, f"Inv- {action['item']}")
                elif action["type"] == "assign":
                    key, value = action["key"], action["value"]
                    current_value = state["characteristics"].get(key, {"value": 0})["value"]
                    local_vars = {k: v["value"] for k, v in state["characteristics"].items()}
                    try:
                        new_value = int(value) if value.isdigit() else eval(value, {}, local_vars)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –≤ assign: {e}")
                        new_value = current_value  

                    state["characteristics"][key] = {
                        "name": state["characteristics"].get(key, {"name": key})["name"],
                        "value": new_value,
                    }

            # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≥–ª–∞–≤—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
            state["chapter"] = option_data["target"]

        else:
            state["chapter"] = option_data

        save_state(chat_id, state)
        send_chapter(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ (–≥–ª–∞–≤—ã)
def get_all_options():
    return {option for chapter in chapters.values() for option in chapter["options"].keys()}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
@bot.message_handler(func=lambda message: message.text == "üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É")
def save_game(message):
    chat_id = message.chat.id
    state = load_state(chat_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    save_name = datetime.now().strftime("%Y-%m-%d %H:%M")
    state["saves"].append({"name": save_name, "chapter": state["chapter"]})
    save_state(chat_id, state)

    bot.send_message(chat_id, f"‚úÖ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_name}")

    # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤—É –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    send_chapter(chat_id)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É")
def load_game(message):
    chat_id = message.chat.id
    state = load_state(chat_id)

    if not state["saves"]:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π.")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    for i, save in enumerate(state["saves"]):
        markup.add(types.KeyboardButton(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å {i+1} ({save['name']})"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text.startswith("–ó–∞–≥—Ä—É–∑–∏—Ç—å "))
def handle_load_choice(message):
    chat_id = message.chat.id
    state = load_state(chat_id)

    saves_list = list(state["saves"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º deque –≤ —Å–ø–∏—Å–æ–∫
    try:
        save_index = int(message.text.split()[1]) - 1
        if 0 <= save_index < len(saves_list):
            selected_save = saves_list[save_index]

            state["chapter"] = selected_save["chapter"]
            save_state(chat_id, state)

            send_chapter(chat_id)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    except ValueError:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


