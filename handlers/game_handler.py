# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã

from config import bot, chapters, first_chapter  
from utils.state_manager import load_state, save_state, SAVES_LIMIT
from utils.helpers import check_conditions, calculate_characteristic, process_inventory_action, replace_variables_in_text, evaluate_condition
import telebot.types as types
from collections import deque
from datetime import datetime
import os
import random
import re

DATA_DIR = "data"  # üìÇ –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
# –ö–æ–º–∞–Ω–¥–∞ /start (–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã)
@bot.message_handler(commands=['start'])
def start_game(message):
    user_id = message.chat.id
    state = {
        "chapter": first_chapter,
        "instruction": None,
        "inventory": [],
        "gold": 0,
        "characteristics": {},
        "saves": deque([], maxlen=SAVES_LIMIT),
        "options": {}  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    }
    save_state(user_id, state)
    send_chapter(user_id)

    
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
def update_characteristics(state, chapter):
    if "characteristics" in chapter:
        for key, char_data in chapter["characteristics"].items():
            new_value = calculate_characteristic(char_data["value"], state)
            state["characteristics"][key] = {
                "name": char_data.get("name", key),
                "value": new_value,
            }
            print(f"handler | update_characteristics | {key}: {new_value}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤—ã –∏–≥—Ä–æ–∫—É
def send_chapter(chat_id):
    state = load_state(chat_id)
    chapter_key = state["chapter"]
    chapter = chapters.get(chapter_key)
    print(f"------------------------CHAPTER: {chapter_key}")
    if not chapter:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –≥–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    buttons = []
    state["options"] = {}

    # ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≤—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    for action in chapter:
        execute_action(chat_id, state, action, buttons)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ Telegram
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    markup.add(*buttons)

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    markup.add(
        types.KeyboardButton("üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É"),
        types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É"),
        types.KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        types.KeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
        types.KeyboardButton("üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"),
    )

    # ‚úÖ –û–¢–ü–†–ê–í–ö–ê –ú–ï–ù–Æ –ü–û–°–õ–ï –í–°–ï–• –î–ï–ô–°–¢–í–ò–ô
    bot.send_message(chat_id, ".", reply_markup=markup)
    save_state(chat_id, state)

def execute_action(chat_id, state, action, buttons):
    action_type = action["type"]
    value = action["value"]

    print(f"‚û°Ô∏è Action: {action_type} | value: {str(value)[:60]}{'...' if len(str(value)) > 60 else ''}")

    if action_type == "text":
        bot.send_message(chat_id, value)

    elif action_type == "btn":
        buttons.append(types.KeyboardButton(value["text"]))
        state["options"][value["text"]] = value["target"]

    elif action_type == "xbtn":
        buttons.append(types.KeyboardButton(value["text"]))
        state["options"][value["text"]] = value["target"]

        # ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ xbtn
        for sub_action in value.get("actions", []):
            execute_action(chat_id, state, sub_action, buttons)

    elif action_type == "inventory":
        # ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ–æ—Ä–º–∞—Ç–æ–º "inv+–ú–µ—á"
        process_inventory_action(state, value)

    elif action_type == "gold":
        if value.startswith("+"):
            state["gold"] += int(value[1:])
        elif value.startswith("-"):
            state["gold"] -= int(value[1:])
        else:
            try:
                state["gold"] = int(value)  # ‚úÖ –ï—Å–ª–∏ –±–µ–∑ –∑–Ω–∞–∫–∞ ‚Äî –∑–∞–¥–∞—ë–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–æ–ª–æ—Ç–∞: {e}")

        print(f"üí∞ –¢–µ–∫—É—â–µ–µ –∑–æ–ª–æ—Ç–æ: {state['gold']}")


    elif action_type == "assign":
        key = value["key"]
        new_value = value["value"]
        name = value.get("name", key)

        # ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–∞ RND12, RND6 –∏ —Ç.–¥.
        new_value = re.sub(r'RND(\d+)', lambda m: str(random.randint(1, int(m.group(1)))), new_value)
        local_vars = {k: v["value"] for k, v in state["characteristics"].items()}
        try:
            new_value = int(new_value) if new_value.isdigit() else eval(new_value, {}, local_vars)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ assign: {e}")
            new_value = state["characteristics"].get(key, {"value": 0})["value"]

        state["characteristics"][key] = {
            "name": name,
            "value": new_value
        }

    elif action_type == "goto":
        target = value
        if target and target in chapters:
            state["chapter"] = target
            save_state(chat_id, state)
            send_chapter(chat_id)
            return

    elif action_type == "if":
        condition = value["condition"]
        actions = value["actions"]
        else_actions = value.get("else_actions", [])

        # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º '=' –Ω–∞ '==' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        condition = condition.replace("=", "==")
        local_vars = {k: v["value"] for k, v in state["characteristics"].items()}
        try:
            if eval(condition, {}, local_vars):
                for sub_action in actions:
                    execute_action(chat_id, state, sub_action, buttons)
            else:
                for sub_action in else_actions:
                    execute_action(chat_id, state, sub_action, buttons)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ if: {e}")

    elif action_type == "image":
        image_path = DATA_DIR + value.replace("\\", "/")
        if os.path.exists(image_path):
            with open(image_path, "rb") as photo:
                bot.send_photo(chat_id, photo)
        else:
            bot.send_message(chat_id, f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {value}")




def send_options_keyboard(chat_id, chapter):
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    state = load_state(chat_id)

    buttons = []
    state["options"] = {}

    # ‚úÖ –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–ø–∏—Å–∫–µ –¥–µ–π—Å—Ç–≤–∏–π
    for action in chapter:
        if action["type"] == "btn":
            value = action["value"]
            buttons.append(types.KeyboardButton(value["text"]))
            state["options"][value["text"]] = value["target"]

        # ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ xbtn (–≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
        if action["type"] == "xbtn":
            value = action["value"]
            buttons.append(types.KeyboardButton(value["text"]))
            state["options"][value["text"]] = value["target"]

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    markup.add(*buttons)
    markup.add(
        types.KeyboardButton("üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É"),
        types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É"),
        types.KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        types.KeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
        types.KeyboardButton("üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"),
    )

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.send_message(chat_id, ".", reply_markup=markup)
    save_state(chat_id, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ (–≥–ª–∞–≤—ã)
@bot.message_handler(func=lambda message: message.text in get_all_options())
def handle_choice(message):
    chat_id = message.chat.id
    state = load_state(chat_id)
    chapter_key = state["chapter"]
    chapter = chapters.get(chapter_key)

    if not chapter:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≥–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    for action in chapter:
        if action["type"] == "btn" and action["value"]["text"] == message.text:
            target = action["value"]["target"]
            state["chapter"] = target
            save_state(chat_id, state)
            send_chapter(chat_id)
            return

        if action["type"] == "xbtn" and action["value"]["text"] == message.text:
            target = action["value"]["target"]
            state["chapter"] = target
            
            # ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ actions, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å xbtn
            for sub_action in action["value"]["actions"]:
                execute_action(chat_id, state, sub_action, [])
                
            save_state(chat_id, state)
            send_chapter(chat_id)
            return

    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ (–≥–ª–∞–≤—ã)
def get_all_options():
    return {
        option 
        for chapter in chapters.values()
        for action in chapter 
        if action["type"] == "btn" or action["type"] == "xbtn"
        for option in ([action["value"]["text"]] if action["type"] == "btn" else [action["value"]["text"]])
    }



# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
@bot.message_handler(func=lambda message: message.text == "üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É")
def save_game(message):
    chat_id = message.chat.id
    state = load_state(chat_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    save_name = datetime.now().strftime("%Y-%m-%d %H:%M")
    state["saves"].append({"name": save_name, "chapter": state["chapter"]})
    save_state(chat_id, state)

    bot.send_message(chat_id, f"‚úÖ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_name}")

    # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤—É –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    send_chapter(chat_id)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É")
def load_game(message):
    chat_id = message.chat.id
    state = load_state(chat_id)

    if not state["saves"]:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π.")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    for i, save in enumerate(state["saves"]):
        markup.add(types.KeyboardButton(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å {i+1} ({save['name']})"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text.startswith("–ó–∞–≥—Ä—É–∑–∏—Ç—å "))
def handle_load_choice(message):
    chat_id = message.chat.id
    state = load_state(chat_id)

    saves_list = list(state["saves"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º deque –≤ —Å–ø–∏—Å–æ–∫
    try:
        save_index = int(message.text.split()[1]) - 1
        if 0 <= save_index < len(saves_list):
            selected_save = saves_list[save_index]

            state["chapter"] = selected_save["chapter"]
            save_state(chat_id, state)

            send_chapter(chat_id)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    except ValueError:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


