import json
import os
import datetime
from collections import deque
from telebot import TeleBot, types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')

bot = TeleBot(TOKEN)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CHAPTERS_FILE = 'chapters.json'
INSTRUCTIONS_FILE = 'instructions.json'
SAVES_DIR = 'saves'
SAVES_LIMIT = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –Ω–∞ –∏–≥—Ä–æ–∫–∞

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(SAVES_DIR):
    os.makedirs(SAVES_DIR)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞
def load_json(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
chapters = load_json(CHAPTERS_FILE)
instructions = load_json(INSTRUCTIONS_FILE)

first_chapter = list(chapters.keys())[0] if chapters else None  # –ü–µ—Ä–≤–∞—è –≥–ª–∞–≤–∞
first_instruction = list(instructions.keys())[0] if instructions else None  # –ü–µ—Ä–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
def load_state(user_id):
    save_file = f"{SAVES_DIR}/{user_id}.json"
    if os.path.exists(save_file):
        with open(save_file, 'r', encoding='utf-8') as file:
            state = json.load(file)
            state["saves"] = deque(state.get("saves", []), maxlen=SAVES_LIMIT)
            return state
    return {"chapter": first_chapter, "instruction": None, "saves": deque([], maxlen=SAVES_LIMIT)}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
def save_state(user_id, state):
    save_file = f"{SAVES_DIR}/{user_id}.json"
    state_copy = state.copy()
    state_copy["saves"] = list(state_copy["saves"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º deque –≤ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    with open(save_file, 'w', encoding='utf-8') as file:
        json.dump(state_copy, file, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ /start (–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã)
@bot.message_handler(commands=['start'])
def start_game(message):
    user_id = message.chat.id
    state = {"chapter": first_chapter, "instruction": None, "saves": deque([], maxlen=SAVES_LIMIT)}
    save_state(user_id, state)
    send_chapter(user_id)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤—ã –∏–≥—Ä–æ–∫—É
def send_chapter(chat_id):
    state = load_state(chat_id)
    chapter_key = state["chapter"]
    chapter = chapters.get(chapter_key)

    if not chapter:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –≥–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    bot.send_message(chat_id, chapter["text"])
    send_options_keyboard(chat_id, chapter)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
def send_instruction(chat_id):
    state = load_state(chat_id)
    instruction_key = state["instruction"]
    instruction = instructions.get(instruction_key)

    if not instruction:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ä–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot.send_message(chat_id, instruction["text"])
    send_instruction_keyboard(chat_id, instruction)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤—ã
def send_options_keyboard(chat_id, chapter):
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    buttons = [types.KeyboardButton(option) for option in chapter["options"].keys()]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É"), types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É"))
    markup.add(types.KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
def send_instruction_keyboard(chat_id, instruction):
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    buttons = [types.KeyboardButton(option) for option in instruction["options"].keys()]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ (–≥–ª–∞–≤—ã)
@bot.message_handler(func=lambda message: message.text in get_all_options())
def handle_choice(message):
    chat_id = message.chat.id
    state = load_state(chat_id)
    chapter_key = state["chapter"]
    chapter = chapters.get(chapter_key)

    if message.text in chapter["options"]:
        state["chapter"] = chapter["options"][message.text]
        save_state(chat_id, state)
        send_chapter(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ (–≥–ª–∞–≤—ã)
def get_all_options():
    return {option for chapter in chapters.values() for option in chapter["options"].keys()}

# –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@bot.message_handler(func=lambda message: message.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
def enter_instruction(message):
    chat_id = message.chat.id
    state = load_state(chat_id)
    state["instruction"] = first_instruction  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    save_state(chat_id, state)
    send_instruction(chat_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@bot.message_handler(func=lambda message: message.text in get_instruction_options())
def handle_instruction_choice(message):
    chat_id = message.chat.id
    state = load_state(chat_id)
    instruction_key = state["instruction"]
    instruction = instructions.get(instruction_key)

    if message.text in instruction["options"]:
        state["instruction"] = instruction["options"][message.text]
        save_state(chat_id, state)
        send_instruction(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
def get_instruction_options():
    return {option for instruction in instructions.values() for option in instruction["options"].keys()}

# –í—ã—Ö–æ–¥ –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –∏–≥—Ä—É
@bot.message_handler(func=lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É")
def exit_instruction(message):
    chat_id = message.chat.id
    state = load_state(chat_id)
    state["instruction"] = None  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    save_state(chat_id, state)
    send_chapter(chat_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–≤–µ—Å—Ç

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
