import json
import os
import datetime
from collections import deque
from telebot import TeleBot, types
from dotenv import load_dotenv


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')

bot = TeleBot(TOKEN)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CHAPTERS_FILE = 'chapters.json'
SAVES_DIR = 'saves'
SAVES_LIMIT = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –Ω–∞ –∏–≥—Ä–æ–∫–∞

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(SAVES_DIR):
    os.makedirs(SAVES_DIR)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞
def load_json(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤ –∫–≤–µ—Å—Ç–∞
chapters = load_json(CHAPTERS_FILE)
first_chapter = list(chapters.keys())[0] if chapters else None  # –ü–µ—Ä–≤–∞—è –≥–ª–∞–≤–∞

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
def load_state(user_id):
    save_file = f"{SAVES_DIR}/{user_id}.json"
    if os.path.exists(save_file):
        with open(save_file, 'r', encoding='utf-8') as file:
            state = json.load(file)
            state["saves"] = deque(state.get("saves", []), maxlen=SAVES_LIMIT)
            return state
    return {"chapter": first_chapter, "saves": deque([], maxlen=SAVES_LIMIT)}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
def save_state(user_id, state):
    save_file = f"{SAVES_DIR}/{user_id}.json"
    state_copy = state.copy()
    state_copy["saves"] = list(state_copy["saves"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º deque –≤ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    with open(save_file, 'w', encoding='utf-8') as file:
        json.dump(state_copy, file, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ /start (–Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã)
@bot.message_handler(commands=['start'])
def start_game(message):
    user_id = message.chat.id
    state = {"chapter": first_chapter, "saves": deque([], maxlen=SAVES_LIMIT)}
    save_state(user_id, state)
    send_chapter(user_id)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤—ã –∏–≥—Ä–æ–∫—É
def send_chapter(chat_id):
    state = load_state(chat_id)
    chapter_key = state["chapter"]
    chapter = chapters.get(chapter_key)

    if not chapter:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –≥–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    bot.send_message(chat_id, chapter["text"])
    send_options_keyboard(chat_id, chapter)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞
def send_options_keyboard(chat_id, chapter):
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    buttons = [types.KeyboardButton(option) for option in chapter["options"].keys()]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É"), types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
@bot.message_handler(func=lambda message: message.text in get_all_options())
def handle_choice(message):
    chat_id = message.chat.id
    state = load_state(chat_id)
    chapter_key = state["chapter"]
    chapter = chapters.get(chapter_key)

    if message.text in chapter["options"]:
        state["chapter"] = chapter["options"][message.text]
        save_state(chat_id, state)
        send_chapter(chat_id)
    else:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
def get_all_options():
    return {option for chapter in chapters.values() for option in chapter["options"].keys()}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
@bot.message_handler(func=lambda message: message.text == "üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É")
def save_game(message):
    chat_id = message.chat.id
    state = load_state(chat_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    save_name = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    state["saves"].append({"name": save_name, "chapter": state["chapter"]})
    save_state(chat_id, state)

    bot.send_message(chat_id, f"‚úÖ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_name}")

    # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤—É –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    send_chapter(chat_id)



# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É")
def load_game(message):
    chat_id = message.chat.id
    state = load_state(chat_id)

    if not state["saves"]:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π.")
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    for i, save in enumerate(state["saves"]):
        markup.add(types.KeyboardButton(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å {i+1} ({save['name']})"))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text.startswith("–ó–∞–≥—Ä—É–∑–∏—Ç—å "))
def handle_load_choice(message):
    chat_id = message.chat.id
    state = load_state(chat_id)

    saves_list = list(state["saves"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º deque –≤ —Å–ø–∏—Å–æ–∫
    try:
        save_index = int(message.text.split()[1]) - 1
        if 0 <= save_index < len(saves_list):
            selected_save = saves_list[save_index]

            state["chapter"] = selected_save["chapter"]
            save_state(chat_id, state)

            send_chapter(chat_id)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    except ValueError:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
